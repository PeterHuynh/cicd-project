version: 2.1

commands:
  destroy-environment: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    parameters:
      CIRCLE_WORKFLOW_ID:
        type: string

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment..."

            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive

            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
   
  destroy-environment-frontend: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      CIRCLE_WORKFLOW_ID:
        type: string    
    steps:
      - run:
          name: Destroy frontend environments
          when: on_fail
          command: |
            echo "Destroying environment..."
            aws s3 rm s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive   
            
            aws cloudformation delete-stack --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
  
  destroy-environment-backend: 
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.    
    parameters:
      CIRCLE_WORKFLOW_ID:
        type: string
    steps:
      - run:
          name: Destroy backend environments
          when: on_fail
          command: |
            
            aws cloudformation delete-stack --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} 

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      CIRCLE_WORKFLOW_ID:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable

            SUCCESS=$(curl https://kvdb.io/5M2r9Ds9Z4vr2minhsdMZ7/migration_${CIRCLE_WORKFLOW_ID:0:7})

            if [ $SUCCESS==1 ]
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
            
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build 
            
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build             
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run build     
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: scan-frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit --audit-level=critical       

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: scan-backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --force
            npm audit fix
            npm audit fix --force
            npm audit --audit-level=critical       

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: install tar gzip packages
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
              --region us-west-2  
              
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"             

      - run:
          name: Add back-end ip to ansible inventory
          command: |
            echo "" > inventory.txt
            echo [web] > inventory.txt
            aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text >> .circleci/ansible/inventory.txt
      - run:
          name: check inventory file content
          command: cat .circleci/ansible/inventory.txt

      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}    


  configure-infrastructure:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["22:16:19:ef:ec:85:e2:9a:a1:15:8b:70:4d:91:72:22"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install ansible dependencies
          command: |
            apk add --update ansible
            pip install awscli --upgrade
      - run:
          name: Configure server
          command: |
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/configure-server.yml

      - destroy-environment:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}    
      

  run-migrations:
    docker:
      - image: circleci/node:13.8
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl -k https://kvdb.io/5M2r9Ds9Z4vr2minhsdMZ7/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - revert-migrations:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}         
      

  deploy-frontend:
    docker:      
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: installing all dependencies at once
          command: |
            apk add tar 
            apk add nodejs
            apk add npm
            apk add curl
            pip install awscli --upgrade
            apk add --update ansible
            apk add --update nodejs npm      
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)            
            export API_URL="http://${BACKEND_IP}:3030"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            echo "${API_URL}"
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive           
      
      - destroy-environment:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
      
                    
  deploy-backend:        
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["22:16:19:ef:ec:85:e2:9a:a1:15:8b:70:4d:91:72:22"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install Node dependencies
          command: |                        
            apk add --update ansible
            apk add --update nodejs npm                 
            pip install awscli --upgrade
      - run:
          name: Install Utils dependencies
          command: |
            apk add tar             
            apk add curl
            pip install awscli --upgrade
      - run: 
          name: Create .env production file 
          command: |            
            cd backend
            echo ENVIRONMENT=production >> .env
            echo NODE_ENV=production >> .env
            echo TYPEORM_HOST=$TYPEORM_HOST >> .env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> .env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> .env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> .env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> .env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> .env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> .env
            echo TYPEORM_PORT=$TYPEORM_PORT >> .env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> .env            
            
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm install
            npm run build
            cd ..
            tar -C backend -czvf artifact.tar.gz .              
            mkdir -p ~/project/.circleci/ansible/roles/deploy/files
            cp artifact.tar.gz  ~/project/.circleci/ansible/roles/deploy/files      
            echo "Contents of the inventory.txt file is -------"
            cat .circleci/ansible/inventory.txt
            ansible-playbook -i .circleci/ansible/inventory.txt .circleci/ansible/deploy-backend.yml      
      
      - destroy-environment:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}

  smoke-test:
    docker:
      - image: python:3.11-rc-alpine
    steps:
      - checkout
      - run:
          name: Install curl and aws cli dependencies
          command: |            
            apk add curl
            pip install awscli --upgrade              
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-west-2.amazonaws.com/#/employees"
            echo ${URL}
            if curl -s ${URL} | grep "Welcome"
            then
              return 0
            else
              return 1            
            fi
      - run:
          name: Backend smoke test.
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters "Name=tag:project,Values=udapeople" --output text)            
            export API_URL="http://${BACKEND_IP}:3030"            
            echo "${API_URL}"
            
            if curl ${API_URL}/api/status | grep "ok"
            then
              return 0
            else
              return 1
            fi           
      
      - destroy-environment:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}      

  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            yum install -y tar gzip      
      - run:
          name: Update cloudfront distribution
          command: |
            
            echo "CIRCLE_WORKFLOW_ID:"  "${CIRCLE_WORKFLOW_ID:0:7}"

            echo "Get OldWorkflowID..."
            export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text) 

            echo "Save OldWorkflowID to File OldWorkflowID.txt."
            echo $OldWorkflowID >> ~/project/OldWorkflowID.txt
            cat  ~/OldWorkflowID.txt           
            echo "OldWorkflowID: " "$OldWorkflowID"

            echo "Updating Cloudfront..."
            aws cloudformation deploy --template-file .circleci/files/cloudfront.yml --tags project=udapeople --stack-name initialStack --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}"                                

            echo "Current WorkflowID:" "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"
            echo "CIRCLE_WORKFLOW_ID:"  "${CIRCLE_WORKFLOW_ID:0:7}"

            
        
      - persist_to_workspace:
          root: ~/
          paths:
            - project/OldWorkflowID.txt
      
      - destroy-environment:
          CIRCLE_WORKFLOW_ID: ${CIRCLE_WORKFLOW_ID:0:7}
  cleanup:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Get old stack workflow id
          command: |
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo "OldWorkflowID: "  ${OldWorkflowID}            

            # export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text)  
            # echo "OldWorkflowID:"  ${OldWorkflowID}                      

            echo "CIRCLE_WORKFLOW_ID:"  "${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            echo "Current Stack names: " "${STACKS[@]}"

      - run:
          name: Remove old stacks and files
          command: |
            export OldWorkflowID=$(cat ~/project/OldWorkflowID.txt)
            echo "OldWorkflowID: "  ${OldWorkflowID}            

            # export OldWorkflowID=$(aws cloudformation list-exports --query "Exports[?Name==\`WorkflowID\`].Value" --no-paginate --output text) 
            # echo "OldWorkflowID:"  ${OldWorkflowID}            

            echo "CIRCLE_WORKFLOW_ID:"  "${CIRCLE_WORKFLOW_ID:0:7}"
            echo "FullName with CIRCLE_WORKFLOW_ID:"  "udapeople-${CIRCLE_WORKFLOW_ID:0:7}"

            export STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter CREATE_COMPLETE --no-paginate --output text)

            echo "Current Stack names:" "${STACKS[@]}"

            if [[ "udapeople-${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then

              aws s3 rm "s3://${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"

            else
                 echo "We have an optimal deployment!."
            fi

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:              
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]